[build-system]
requires = ["setuptools>=61.0", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "dark-data-platform"
version = "1.0.0"
description = "AI-powered platform for transforming buried PDF reports into queryable intelligence"
readme = "docs/user/README.md"
requires-python = ">=3.11"
license = {text = "MIT"}
authors = [
    {name = "Dark Data Team", email = "contact@darkdata.dev"}
]
keywords = ["ai", "data-processing", "mcp", "document-analysis", "power-systems"]
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
]
dependencies = [
    "pandas>=2.0.0",
    "flask>=2.3.0",
    "sqlite3",
    "mcp>=1.0.0",
]

[project.optional-dependencies]
dev = [
    "pytest>=7.0.0",
    "pytest-cov>=4.0.0",
    "black>=23.0.0",
    "isort>=5.12.0",
    "flake8>=6.0.0",
    "mypy>=1.0.0",
    "pre-commit>=3.0.0",
]
web = [
    "plotly>=5.0.0",
    "matplotlib>=3.6.0",
    "seaborn>=0.12.0",
]
analysis = [
    "openpyxl>=3.1.0",
    "sqlalchemy>=2.0.0",
]

[project.urls]
Homepage = "https://github.com/darkdata/dark-data-platform"
Repository = "https://github.com/darkdata/dark-data-platform.git"
Documentation = "https://dark-data-platform.readthedocs.io"
"Bug Tracker" = "https://github.com/darkdata/dark-data-platform/issues"

[project.scripts]
dark-data = "dark_data.cli.main:main"
dark-data-web = "dark_data.web.dashboard:main"
dark-data-mcp = "dark_data.mcp.servers.mcp_server:main"

[tool.setuptools.packages.find]
where = ["."]
include = ["dark_data*"]

[tool.black]
line-length = 88
target-version = ['py311']
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | build
  | dist
)/
'''

[tool.isort]
profile = "black"
multi_line_output = 3
include_trailing_comma = true
force_grid_wrap = 0
use_parentheses = true
ensure_newline_before_comments = true
line_length = 88

[tool.pytest.ini_options]
minversion = "7.0"
addopts = "-ra -q --strict-markers --cov=dark_data --cov-report=term-missing"
testpaths = ["tests"]
python_files = ["test_*.py", "*_test.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]

[tool.mypy]
python_version = "3.11"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
show_error_codes = true

[tool.coverage.run]
source = ["dark_data"]
omit = [
    "tests/*",
    "dark_data/__init__.py",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\bProtocol\):",
    "@(abc\.)?abstractmethod",
]